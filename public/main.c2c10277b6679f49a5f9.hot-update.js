/*! For license information please see main.c2c10277b6679f49a5f9.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateboilerplate("main",{"./app/classes/Page.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>a});var l=s("./node_modules/gsap/index.js"),i=s("./node_modules/prefix/index.js"),n=s.n(i),o=s("./node_modules/lodash/each.js"),r=s.n(o);class a{constructor({id:e,element:t,elements:s}){this.id=e,this.selector=t,this.selectorChildren={...s},this.scroll={current:0,target:0,last:0,limit:1e3},this.transformPrefix=n()("transform"),this.onMouseWheelEvent=this.onMouseWheel.bind(this)}create(){this.element=document.querySelector(this.selector),this.elements={},this.scroll={current:0,target:0,last:0,limit:1e3},r()(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[t]=e:(this.elements[t]=document.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=document.querySelector(e)))}))}show(){return new Promise((e=>{this.animationIn=l.default.timeline(),this.animationIn.fromTo(this.element,{autoAlpha:0},{autoAlpha:1,onComplete:e}),this.animationIn.call((t=>{this.addEventListeners(),e()}))}))}hide(){return new Promise((e=>{this.removeEventListeners(),this.animationOut=l.default.timeline(),this.animationOut.to(this.element,{autoAlpha:0,onComplete:e})}))}onMouseWheel(e){const{deltaY:t}=e;console.log(this.scroll.target),this.scroll.target+=t,console.log(this.scroll.target)}update(){console.log(this.scroll.target),this.scroll.target=l.default.utils.clamp(0,this.scroll.limit,this.scroll.target),this.scroll.current=l.default.utils.interpolate(this.scroll.current,this.scroll.target,.1),this.elements.wrapper&&(this.elements.wrapper.style[this.transformPrefix]=`translateY(-${this.scroll.current}px)`)}addEventListeners(){window.addEventListener("mousewheel",this.onMouseWheelEvent)}removeEventListeners(){window.removeEventListener("mousewheel",this.onMouseWheelEvent)}}}},(function(e){e.h=()=>"719568a3eeb8c14edf33"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5jMmMxMDI3N2I2Njc5ZjQ5YTVmOS5ob3QtdXBkYXRlLmpzIiwibWFwcGluZ3MiOiI7MlBBSWUsTUFBTUEsRUFDakJDLGFBQWEsR0FDVEMsRUFEUyxRQUVUQyxFQUZTLFNBR1RDLElBRUFDLEtBQUtILEdBQUtBLEVBQ1ZHLEtBQUtDLFNBQVdILEVBQ2hCRSxLQUFLRSxpQkFBbUIsSUFDakJILEdBR1BDLEtBQUtHLE9BQVMsQ0FDVkMsUUFBUyxFQUNUQyxPQUFRLEVBQ1JDLEtBQUssRUFDTEMsTUFBTyxLQUdYUCxLQUFLUSxnQkFBa0JDLEdBQUFBLENBQU8sYUFFOUJULEtBQUtVLGtCQUFvQlYsS0FBS1csYUFBYUMsS0FBS1osTUFHcERhLFNBQ0liLEtBQUtGLFFBQVVnQixTQUFTQyxjQUFjZixLQUFLQyxVQUMzQ0QsS0FBS0QsU0FBVyxHQUVoQkMsS0FBS0csT0FBUyxDQUNWQyxRQUFTLEVBQ1RDLE9BQVEsRUFDUkMsS0FBSyxFQUNMQyxNQUFPLEtBR1hTLEdBQUFBLENBQUtoQixLQUFLRSxrQkFBa0IsQ0FBQ2UsRUFBT0MsS0FDNUJELGFBQWlCRSxPQUFPQyxhQUFlSCxhQUFpQkUsT0FBT0UsVUFBWUMsTUFBTUMsUUFBUU4sR0FDekZqQixLQUFLRCxTQUFTbUIsR0FBT0QsR0FFckJqQixLQUFLRCxTQUFTbUIsR0FBT0osU0FBU1UsaUJBQWlCUCxHQUViLElBQTlCakIsS0FBS0QsU0FBU21CLEdBQUtPLE9BQ25CekIsS0FBS0QsU0FBU21CLEdBQU8sS0FDZ0IsSUFBOUJsQixLQUFLRCxTQUFTbUIsR0FBS08sU0FDMUJ6QixLQUFLRCxTQUFTbUIsR0FBT0osU0FBU0MsY0FBY0UsUUFNNURTLE9BQ0ksT0FBTyxJQUFJQyxTQUFRQyxJQUNmNUIsS0FBSzZCLFlBQWNDLEVBQUFBLFFBQUFBLFdBRW5COUIsS0FBSzZCLFlBQVlFLE9BQU8vQixLQUFLRixRQUFTLENBQ2xDa0MsVUFBVyxHQUVmLENBQ0lBLFVBQVcsRUFDWEMsV0FBWUwsSUFHaEI1QixLQUFLNkIsWUFBWUssTUFBTUMsSUFDbkJuQyxLQUFLb0Msb0JBQ0xSLFVBS1pTLE9BQ0ksT0FBTyxJQUFJVixTQUFRQyxJQUNmNUIsS0FBS3NDLHVCQUVMdEMsS0FBS3VDLGFBQWVULEVBQUFBLFFBQUFBLFdBRXBCOUIsS0FBS3VDLGFBQWFDLEdBQUd4QyxLQUFLRixRQUFTLENBQy9Ca0MsVUFBVyxFQUNYQyxXQUFZTCxPQUt4QmpCLGFBQWE4QixHQUNULE1BQU0sT0FBRUMsR0FBV0QsRUFDbkJFLFFBQVFDLElBQUk1QyxLQUFLRyxPQUFPRSxRQUN4QkwsS0FBS0csT0FBT0UsUUFBVXFDLEVBQ3RCQyxRQUFRQyxJQUFJNUMsS0FBS0csT0FBT0UsUUFHNUJ3QyxTQUNJRixRQUFRQyxJQUFJNUMsS0FBS0csT0FBT0UsUUFDeEJMLEtBQUtHLE9BQU9FLE9BQVN5QixFQUFBQSxRQUFBQSxNQUFBQSxNQUFpQixFQUFHOUIsS0FBS0csT0FBT0ksTUFBT1AsS0FBS0csT0FBT0UsUUFDeEVMLEtBQUtHLE9BQU9DLFFBQVUwQixFQUFBQSxRQUFBQSxNQUFBQSxZQUF1QjlCLEtBQUtHLE9BQU9DLFFBQVNKLEtBQUtHLE9BQU9FLE9BQVEsSUFFbEZMLEtBQUtELFNBQVMrQyxVQUNkOUMsS0FBS0QsU0FBUytDLFFBQVFDLE1BQU0vQyxLQUFLUSxpQkFBb0IsZUFBY1IsS0FBS0csT0FBT0MsY0FJdkZnQyxvQkFDSWpCLE9BQU82QixpQkFBaUIsYUFBY2hELEtBQUtVLG1CQUcvQzRCLHVCQUNJbkIsT0FBTzhCLG9CQUFvQixhQUFjakQsS0FBS1Usb0NDNUd0RHdDLEVBQW9CQyxFQUFJLElBQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ib2lsZXJwbGF0ZS8uL2FwcC9jbGFzc2VzL1BhZ2UuanMiLCJ3ZWJwYWNrOi8vYm9pbGVycGxhdGUvd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBHU0FQIGZyb20gJ2dzYXAnXHJcbmltcG9ydCBQcmVmaXggZnJvbSAncHJlZml4J1xyXG5pbXBvcnQgZWFjaCBmcm9tICdsb2Rhc2gvZWFjaCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhZ2Uge1xyXG4gICAgY29uc3RydWN0b3IgKHtcclxuICAgICAgICBpZCxcclxuICAgICAgICBlbGVtZW50LFxyXG4gICAgICAgIGVsZW1lbnRzXHJcbiAgICB9KSB7XHJcbiAgICAgICAgdGhpcy5pZCA9IGlkXHJcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IGVsZW1lbnRcclxuICAgICAgICB0aGlzLnNlbGVjdG9yQ2hpbGRyZW4gPSB7XHJcbiAgICAgICAgICAgIC4uLmVsZW1lbnRzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNjcm9sbCA9IHtcclxuICAgICAgICAgICAgY3VycmVudDogMCxcclxuICAgICAgICAgICAgdGFyZ2V0OiAwLFxyXG4gICAgICAgICAgICBsYXN0OjAsXHJcbiAgICAgICAgICAgIGxpbWl0OiAxMDAwXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnRyYW5zZm9ybVByZWZpeCA9IFByZWZpeCgndHJhbnNmb3JtJylcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLm9uTW91c2VXaGVlbEV2ZW50ID0gdGhpcy5vbk1vdXNlV2hlZWwuYmluZCh0aGlzKVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZSAoKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLnNlbGVjdG9yKVxyXG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSB7fVxyXG5cclxuICAgICAgICB0aGlzLnNjcm9sbCA9IHtcclxuICAgICAgICAgICAgY3VycmVudDogMCxcclxuICAgICAgICAgICAgdGFyZ2V0OiAwLFxyXG4gICAgICAgICAgICBsYXN0OjAsXHJcbiAgICAgICAgICAgIGxpbWl0OiAxMDAwXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlYWNoKHRoaXMuc2VsZWN0b3JDaGlsZHJlbiwgKGVudHJ5LCBrZXkpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVudHJ5IGluc3RhbmNlb2Ygd2luZG93LkhUTUxFbGVtZW50IHx8IGVudHJ5IGluc3RhbmNlb2Ygd2luZG93Lk5vZGVMaXN0IHx8IEFycmF5LmlzQXJyYXkoZW50cnkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSBlbnRyeVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbnRyeSlcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50c1trZXldLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IG51bGxcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5lbGVtZW50c1trZXldLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZW50cnkpXHJcbiAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2hvdyAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkluID0gR1NBUC50aW1lbGluZSgpXHJcblxyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkluLmZyb21Ubyh0aGlzLmVsZW1lbnQsIHtcclxuICAgICAgICAgICAgICAgIGF1dG9BbHBoYTogMFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBhdXRvQWxwaGE6IDEsXHJcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiByZXNvbHZlXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkluLmNhbGwoIF8gPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGhpZGUgKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpXHJcblxyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbk91dCA9IEdTQVAudGltZWxpbmUoKVxyXG5cclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25PdXQudG8odGhpcy5lbGVtZW50LCB7XHJcbiAgICAgICAgICAgICAgICBhdXRvQWxwaGE6IDAsXHJcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiByZXNvbHZlXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBvbk1vdXNlV2hlZWwoZXZlbnQpIHtcclxuICAgICAgICBjb25zdCB7IGRlbHRhWSB9ID0gZXZlbnRcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnNjcm9sbC50YXJnZXQpO1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsLnRhcmdldCArPSBkZWx0YVlcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnNjcm9sbC50YXJnZXQpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZSgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnNjcm9sbC50YXJnZXQpXHJcbiAgICAgICAgdGhpcy5zY3JvbGwudGFyZ2V0ID0gR1NBUC51dGlscy5jbGFtcCgwLCB0aGlzLnNjcm9sbC5saW1pdCwgdGhpcy5zY3JvbGwudGFyZ2V0KVxyXG4gICAgICAgIHRoaXMuc2Nyb2xsLmN1cnJlbnQgPSBHU0FQLnV0aWxzLmludGVycG9sYXRlKHRoaXMuc2Nyb2xsLmN1cnJlbnQsIHRoaXMuc2Nyb2xsLnRhcmdldCwgMC4xKVxyXG5cclxuICAgICAgICBpZiAodGhpcy5lbGVtZW50cy53cmFwcGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMud3JhcHBlci5zdHlsZVt0aGlzLnRyYW5zZm9ybVByZWZpeF0gPSBgdHJhbnNsYXRlWSgtJHt0aGlzLnNjcm9sbC5jdXJyZW50fXB4KWBcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYWRkRXZlbnRMaXN0ZW5lcnMgKCkge1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXdoZWVsJywgdGhpcy5vbk1vdXNlV2hlZWxFdmVudClcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVFdmVudExpc3RlbmVycyAoKSB7XHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNld2hlZWwnLCB0aGlzLm9uTW91c2VXaGVlbEV2ZW50KVxyXG4gICAgfVxyXG59IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gKFwiNzE5NTY4YTNlZWI4YzE0ZWRmMzNcIikiXSwibmFtZXMiOlsiUGFnZSIsImNvbnN0cnVjdG9yIiwiaWQiLCJlbGVtZW50IiwiZWxlbWVudHMiLCJ0aGlzIiwic2VsZWN0b3IiLCJzZWxlY3RvckNoaWxkcmVuIiwic2Nyb2xsIiwiY3VycmVudCIsInRhcmdldCIsImxhc3QiLCJsaW1pdCIsInRyYW5zZm9ybVByZWZpeCIsIlByZWZpeCIsIm9uTW91c2VXaGVlbEV2ZW50Iiwib25Nb3VzZVdoZWVsIiwiYmluZCIsImNyZWF0ZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImVhY2giLCJlbnRyeSIsImtleSIsIndpbmRvdyIsIkhUTUxFbGVtZW50IiwiTm9kZUxpc3QiLCJBcnJheSIsImlzQXJyYXkiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGVuZ3RoIiwic2hvdyIsIlByb21pc2UiLCJyZXNvbHZlIiwiYW5pbWF0aW9uSW4iLCJHU0FQIiwiZnJvbVRvIiwiYXV0b0FscGhhIiwib25Db21wbGV0ZSIsImNhbGwiLCJfIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJoaWRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJhbmltYXRpb25PdXQiLCJ0byIsImV2ZW50IiwiZGVsdGFZIiwiY29uc29sZSIsImxvZyIsInVwZGF0ZSIsIndyYXBwZXIiLCJzdHlsZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImgiXSwic291cmNlUm9vdCI6IiJ9