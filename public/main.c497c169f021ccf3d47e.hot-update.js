/*! For license information please see main.c497c169f021ccf3d47e.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateboilerplate("main",{"./app/classes/Component.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/lodash/each.js"),a=s.n(n);class o{constructor({element:e,elements:t}){this.selector=e,this.selectorChildren={...t},this.create(),this.addEventListeners(),this.removeEventListeners()}create(){this.element=document.querySelector(this.selector),this.elements={},a()(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[t]=e:(this.elements[t]=document.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=document.querySelector(e)))}))}addEventListeners(){return new Promise((e=>{GSAP.from(this.element,{autoAlpha:0,onComplete:e})}))}removeEventListeners(){return new Promise((e=>{GSAP.to(this.element,{autoAlpha:0,onComplete:e})}))}}},"./app/components/Preloader.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>n});s("./app/classes/Component.js");class n extends Component{constructor(){super({element:".preloader",elements:{title:".preloader__text",number:".preloader__number"}})}}},"./app/index.js":(e,t,s)=>{s.r(t);var n=s("./node_modules/lodash/each.js"),a=s.n(n),o=s("./app/components/Preloader.js"),l=s("./app/pages/Home/index.js"),r=s("./app/pages/About/index.js"),i=s("./app/pages/Collections/index.js"),c=s("./app/pages/Detail/index.js");new class{constructor(){this.createPreloader(),this.creatContent(),this.createPages(),this.addLinkListeners()}createPreloader(){this.preloader=new o.default}creatContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createPages(){this.pages={home:new l.default,about:new r.default,collections:new i.default,detail:new c.default},this.page=this.pages[this.template],this.page.create(),this.page.show()}async onChange(e){await this.page.hide();const t=await window.fetch(e);if(200===t.status){const e=await t.text(),s=document.createElement("div");s.innerHTML=e;const n=s.querySelector(".content");this.template=n.getAttribute("data-template"),this.content.setAttribute("data-template",this.template),this.content.innerHTML=n.innerHTML,this.page=this.pages[this.template],this.page.create(),this.page.show()}else console.log("C'est la merde mon gars !")}addLinkListeners(){const e=document.querySelectorAll("a");a()(e,(e=>{e.onclick=t=>{const{href:s}=e;t.preventDefault(),this.onChange(s),console.log(t)}}))}}}},(function(e){e.h=()=>"6c1d0e7718afbe0881e4"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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IjpbIndlYnBhY2s6Ly9ib2lsZXJwbGF0ZS8uL2FwcC9jbGFzc2VzL0NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9ib2lsZXJwbGF0ZS8uL2FwcC9jb21wb25lbnRzL1ByZWxvYWRlci5qcyIsIndlYnBhY2s6Ly9ib2lsZXJwbGF0ZS8uL2FwcC9pbmRleC5qcyIsIndlYnBhY2s6Ly9ib2lsZXJwbGF0ZS93ZWJwYWNrL3J1bnRpbWUvZ2V0RnVsbEhhc2giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGVhY2ggZnJvbSAnbG9kYXNoL2VhY2gnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IgKHtcclxuICAgICAgICBlbGVtZW50LFxyXG4gICAgICAgIGVsZW1lbnRzXHJcbiAgICB9KSB7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IGVsZW1lbnRcclxuICAgICAgICB0aGlzLnNlbGVjdG9yQ2hpbGRyZW4gPSB7XHJcbiAgICAgICAgICAgIC4uLmVsZW1lbnRzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNyZWF0ZSgpXHJcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpXHJcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlICgpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuc2VsZWN0b3IpXHJcbiAgICAgICAgdGhpcy5lbGVtZW50cyA9IHt9XHJcblxyXG4gICAgICAgIGVhY2godGhpcy5zZWxlY3RvckNoaWxkcmVuLCAoZW50cnksIGtleSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZW50cnkgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTEVsZW1lbnQgfHwgZW50cnkgaW5zdGFuY2VvZiB3aW5kb3cuTm9kZUxpc3QgfHwgQXJyYXkuaXNBcnJheShlbnRyeSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IGVudHJ5XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVudHJ5KVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2tleV0ubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gbnVsbFxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmVsZW1lbnRzW2tleV0ubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbnRyeSlcclxuICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRFdmVudExpc3RlbmVycyAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICBHU0FQLmZyb20odGhpcy5lbGVtZW50LCB7XHJcbiAgICAgICAgICAgICAgICBhdXRvQWxwaGE6IDAsXHJcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiByZXNvbHZlXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVFdmVudExpc3RlbmVycyAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICBHU0FQLnRvKHRoaXMuZWxlbWVudCwge1xyXG4gICAgICAgICAgICAgICAgYXV0b0FscGhhOiAwLFxyXG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZTogcmVzb2x2ZVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUGFnZSBmcm9tICcuLi9jbGFzc2VzL0NvbXBvbmVudCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByZWxvYWRlciBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGVsZW1lbnQ6ICcucHJlbG9hZGVyJyxcclxuICAgICAgICAgICAgZWxlbWVudHM6IHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiAnLnByZWxvYWRlcl9fdGV4dCcsXHJcbiAgICAgICAgICAgICAgICBudW1iZXI6ICcucHJlbG9hZGVyX19udW1iZXInXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBlYWNoIGZyb20gJ2xvZGFzaC9lYWNoJ1xyXG5cclxuaW1wb3J0IFByZWxvYWRlciBmcm9tICcuL2NvbXBvbmVudHMvUHJlbG9hZGVyJ1xyXG5cclxuaW1wb3J0IEhvbWUgZnJvbSAnLi9wYWdlcy9Ib21lJ1xyXG5pbXBvcnQgQWJvdXQgZnJvbSAnLi9wYWdlcy9BYm91dCdcclxuaW1wb3J0IENvbGxlY3Rpb25zIGZyb20gJy4vcGFnZXMvQ29sbGVjdGlvbnMnXHJcbmltcG9ydCBEZXRhaWwgZnJvbSAnLi9wYWdlcy9EZXRhaWwnXHJcblxyXG5jbGFzcyBBcHAge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVQcmVsb2FkZXIoKVxyXG4gICAgICAgIHRoaXMuY3JlYXRDb250ZW50KClcclxuICAgICAgICB0aGlzLmNyZWF0ZVBhZ2VzKClcclxuICAgICAgICB0aGlzLmFkZExpbmtMaXN0ZW5lcnMoKVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVByZWxvYWRlcigpIHtcclxuICAgICAgICB0aGlzLnByZWxvYWRlciA9IG5ldyBQcmVsb2FkZXIoKVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0Q29udGVudCAoKSB7XHJcbiAgICAgICAgdGhpcy5jb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRlbnQnKVxyXG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSB0aGlzLmNvbnRlbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRlbXBsYXRlJylcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVQYWdlcyAoKSB7XHJcbiAgICAgICAgdGhpcy5wYWdlcyA9IHtcclxuICAgICAgICAgICAgJ2hvbWUnOiBuZXcgSG9tZSgpLFxyXG4gICAgICAgICAgICAnYWJvdXQnOiBuZXcgQWJvdXQoKSxcclxuICAgICAgICAgICAgJ2NvbGxlY3Rpb25zJzogbmV3IENvbGxlY3Rpb25zKCksXHJcbiAgICAgICAgICAgICdkZXRhaWwnOiBuZXcgRGV0YWlsKCkgICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucGFnZSA9IHRoaXMucGFnZXNbdGhpcy50ZW1wbGF0ZV1cclxuICAgICAgICB0aGlzLnBhZ2UuY3JlYXRlKClcclxuICAgICAgICB0aGlzLnBhZ2Uuc2hvdygpXHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgb25DaGFuZ2UgKHVybCkge1xyXG4gICAgICAgIGF3YWl0IHRoaXMucGFnZS5oaWRlKClcclxuXHJcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IGF3YWl0IHdpbmRvdy5mZXRjaCh1cmwpXHJcblxyXG4gICAgICAgIGlmICggcmVxdWVzdC5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgICBjb25zdCBodG1sID0gYXdhaXQgcmVxdWVzdC50ZXh0KClcclxuICAgICAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcclxuXHJcbiAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSBodG1sXHJcblxyXG4gICAgICAgICAgICBjb25zdCBkaXZDb250ZW50ID0gZGl2LnF1ZXJ5U2VsZWN0b3IoJy5jb250ZW50JylcclxuXHJcbiAgICAgICAgICAgIHRoaXMudGVtcGxhdGUgPSBkaXZDb250ZW50LmdldEF0dHJpYnV0ZSgnZGF0YS10ZW1wbGF0ZScpXHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQuc2V0QXR0cmlidXRlKCdkYXRhLXRlbXBsYXRlJywgdGhpcy50ZW1wbGF0ZSlcclxuICAgICAgICAgICAgdGhpcy5jb250ZW50LmlubmVySFRNTCA9IGRpdkNvbnRlbnQuaW5uZXJIVE1MXHJcblxyXG4gICAgICAgICAgICB0aGlzLnBhZ2UgPSB0aGlzLnBhZ2VzW3RoaXMudGVtcGxhdGVdXHJcbiAgICAgICAgICAgIHRoaXMucGFnZS5jcmVhdGUoKVxyXG4gICAgICAgICAgICB0aGlzLnBhZ2Uuc2hvdygpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJDJ2VzdCBsYSBtZXJkZSBtb24gZ2FycyAhXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhZGRMaW5rTGlzdGVuZXJzICgpIHtcclxuICAgICAgICBjb25zdCBsaW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2EnKVxyXG5cclxuICAgICAgICBlYWNoKGxpbmtzLCBsaW5rID0+IHtcclxuICAgICAgICAgICAgbGluay5vbmNsaWNrID0gZXZlbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBocmVmIH0gPSBsaW5rXHJcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkNoYW5nZShocmVmKVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGV2ZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn1cclxuXHJcbm5ldyBBcHAoKSIsIl9fd2VicGFja19yZXF1aXJlX18uaCA9ICgpID0+IChcIjZjMWQwZTc3MThhZmJlMDg4MWU0XCIpIl0sIm5hbWVzIjpbIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwiZWxlbWVudCIsImVsZW1lbnRzIiwidGhpcyIsInNlbGVjdG9yIiwic2VsZWN0b3JDaGlsZHJlbiIsImNyZWF0ZSIsImFkZEV2ZW50TGlzdGVuZXJzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJlYWNoIiwiZW50cnkiLCJrZXkiLCJ3aW5kb3ciLCJIVE1MRWxlbWVudCIsIk5vZGVMaXN0IiwiQXJyYXkiLCJpc0FycmF5IiwicXVlcnlTZWxlY3RvckFsbCIsImxlbmd0aCIsIlByb21pc2UiLCJyZXNvbHZlIiwiR1NBUCIsImZyb20iLCJhdXRvQWxwaGEiLCJvbkNvbXBsZXRlIiwidG8iLCJQcmVsb2FkZXIiLCJzdXBlciIsInRpdGxlIiwibnVtYmVyIiwiY3JlYXRlUHJlbG9hZGVyIiwiY3JlYXRDb250ZW50IiwiY3JlYXRlUGFnZXMiLCJhZGRMaW5rTGlzdGVuZXJzIiwicHJlbG9hZGVyIiwiY29udGVudCIsInRlbXBsYXRlIiwiZ2V0QXR0cmlidXRlIiwicGFnZXMiLCJIb21lIiwiQWJvdXQiLCJDb2xsZWN0aW9ucyIsIkRldGFpbCIsInBhZ2UiLCJzaG93IiwidXJsIiwiaGlkZSIsInJlcXVlc3QiLCJmZXRjaCIsInN0YXR1cyIsImh0bWwiLCJ0ZXh0IiwiZGl2IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsImRpdkNvbnRlbnQiLCJzZXRBdHRyaWJ1dGUiLCJjb25zb2xlIiwibG9nIiwibGlua3MiLCJsaW5rIiwib25jbGljayIsImV2ZW50IiwiaHJlZiIsInByZXZlbnREZWZhdWx0Iiwib25DaGFuZ2UiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiaCJdLCJzb3VyY2VSb290IjoiIn0=